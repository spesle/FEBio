/**
\page factory_classes Registering Plugin Classes

Before a plugin class can be recognized by FEBio it must be registered with the framework. Registration is done in the <b>PluginInitialize</b> function, which is one of the required functions. 

First, make sure to include any header files for the plugin classes at the top of the file. 

\section init_plugin Using PluginInitialize

The PluginInitialize is one of the required functions and will be called by FEBio after it loads the plugin file. In this function a plugin can allocate and initialize any resources it may need. In this function the plugin classes can be registered using the REGISTER_FECORE_CLASS macro. However, before this macro is used it is important to call FECoreKernel::SetInstance with the parameter that is passed to PluginInitialize. 

\code
FECORE_EXPORT void PluginInitialize(FECoreKernel& fecore)
{
	\\ Set the kernel to match FEBio's kernel
	FECoreKernel::SetInstance(&fecore);
	
	\\ Register the classes in this plugin
	REGISTER_FECORE_CLASS(MyMaterial, "My material");
}
\endcode

The first call the FECoreKernel::SetInstance is important to make sure that the plugin and FEBio are using the same kernel. 

The macro <b>REGISTER_FECORE_CLASS</b> takes two parameters. The first parameter is the name of the c++ plugin class (here, MyMaterial). The second parameter is a name that will be used to represent this class in the FEBio input file (i.e. the value for the <i>type</i> attribute). 

*/
